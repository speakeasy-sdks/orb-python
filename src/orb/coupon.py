"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from orb.models import operations, shared
from typing import Optional

class Coupon:
    r"""The Coupon resource represents a discount that can be applied to a customer's invoice. Coupons can be applied to a customer's invoice either by the customer or by the Orb API."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def archive(self, coupon_id: str) -> operations.ArchiveCouponResponse:
        r"""Archive a coupon
        This endpoint allows a coupon to be archived. Archived coupons can no longer be redeemed, and will be hidden from lists of active coupons. Additionally, once a coupon is archived, its redemption code can be reused for a different coupon.
        """
        request = operations.ArchiveCouponRequest(
            coupon_id=coupon_id,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArchiveCouponRequest, base_url, '/coupons/{coupon_id}/archive', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArchiveCouponResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Coupon])
                res.coupon = out

        return res

    
    def create(self, request: shared.CouponInput) -> operations.CreateCouponResponse:
        r"""Create a coupon
        This endpoint allows the creation of coupons, which can then be redeemed at subscription creation or plan change.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/coupons'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = '*/*'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCouponResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def fetch(self, coupon_id: str) -> operations.FetchCouponResponse:
        r"""Retrieve a coupon
        This endpoint retrieves a coupon by its ID. To fetch coupons by their redemption code, use the [List coupons](list-coupons) endpoint with the `redemption_code` parameter.
        """
        request = operations.FetchCouponRequest(
            coupon_id=coupon_id,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchCouponRequest, base_url, '/coupons/{coupon_id}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCouponResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Coupon])
                res.coupon = out

        return res

    
    def list(self, redemption_code: Optional[str] = None, show_archived: Optional[bool] = None) -> operations.ListCouponsResponse:
        r"""List coupons
        This endpoint returns a list of all coupons for an account in a list format. 
        
        The list of coupons is ordered starting from the most recently created coupon. The response also includes [`pagination_metadata`](../api/pagination), which lets the caller retrieve the next page of results if they exist. More information about pagination can be found in the [Pagination-metadata schema](pagination).
        """
        request = operations.ListCouponsRequest(
            redemption_code=redemption_code,
            show_archived=show_archived,
        )
        
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/coupons'
        headers = {}
        query_params = utils.get_query_params(operations.ListCouponsRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCouponsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCoupons200ApplicationJSON])
                res.list_coupons_200_application_json_object = out

        return res

    
    def list_subscriptions(self, coupon_id: str) -> operations.ListCouponSubscriptionsResponse:
        r"""List subscriptions for a coupon
        This endpoint returns a list of all subscriptions that have redeemed a given coupon as a [paginated](../api/pagination) list, ordered starting from the most recently created subscription. For a full discussion of the subscription resource, see [Subscription](../guides/concepts#subscription).
        """
        request = operations.ListCouponSubscriptionsRequest(
            coupon_id=coupon_id,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListCouponSubscriptionsRequest, base_url, '/coupons/{coupon_id}/subscriptions', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCouponSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCouponSubscriptions200ApplicationJSON])
                res.list_coupon_subscriptions_200_application_json_object = out

        return res

    