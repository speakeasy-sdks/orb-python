"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import subscriptionusage as shared_subscriptionusage
from ..shared import viewmode as shared_viewmode
from datetime import datetime
from enum import Enum
from typing import Optional

class FetchSubscriptionUsageGranularity(str, Enum):
    r"""This determines the windowing of usage reporting."""
    DAY = 'day'


@dataclasses.dataclass
class FetchSubscriptionUsageRequest:
    
    subscription_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'subscription_id', 'style': 'simple', 'explode': False }})
    billable_metric_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'billable_metric_id', 'style': 'form', 'explode': True }})
    r"""When specified in conjunction with `group_by`, this parameter filters usage to a single billable metric. Note that both `group_by` and `billable_metric_id` must be specific together."""
    granularity: Optional[FetchSubscriptionUsageGranularity] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'granularity', 'style': 'form', 'explode': True }})
    r"""This determines the windowing of usage reporting."""
    group_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group_by', 'style': 'form', 'explode': True }})
    r"""Groups per-price costs by the key provided."""
    timeframe_end: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timeframe_end', 'style': 'form', 'explode': True }})
    r"""Costs returned are exclusive of `timeframe_end`."""
    timeframe_start: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timeframe_start', 'style': 'form', 'explode': True }})
    r"""Costs returned are inclusive of `timeframe_start`."""
    view_mode: Optional[shared_viewmode.ViewMode] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'view_mode', 'style': 'form', 'explode': True }})
    r"""Controls whether Orb returns cumulative costs since the start of the billing period, or incremental day-by-day costs. If your customer has minimums or discounts, it's strongly recommended that you use the default cumulative behavior."""
    

@dataclasses.dataclass
class FetchSubscriptionUsageResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    subscription_usage: Optional[shared_subscriptionusage.SubscriptionUsage] = dataclasses.field(default=None)
    r"""OK"""
    