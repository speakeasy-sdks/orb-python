"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from orb import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IngestRequestBodyEvents:
    
    event_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_name') }})
    r"""A name to meaningfully identify the action or event type."""
    idempotency_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idempotency_key') }})
    r"""A unique value, generated by the client, that is used to de-duplicate events. Exactly one event with a given idempotency key will be ingested, which allows for safe request retries."""
    properties: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties') }})
    r"""A dictionary of custom properties. Values in this dictionary must be numeric, boolean, or strings. Nested dictionaries are disallowed."""
    timestamp: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp') }})
    r"""An ISO 8601 format date with no timezone offset (i.e. UTC). This should represent the time that usage was recorded, and is particularly important to attribute usage to a given billing period."""
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id'), 'exclude': lambda f: f is None }})
    r"""The Orb Customer identifier"""
    external_customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_customer_id'), 'exclude': lambda f: f is None }})
    r"""An alias for the Orb customer, whose mapping is specified when creating the customer"""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IngestRequestBody:
    
    events: list[IngestRequestBodyEvents] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events') }})
    
class IngestDebug(str, Enum):
    r"""Flag to enable additional debug information in the endpoint response"""
    TRUE = 'true'
    FALSE = 'false'


@dataclasses.dataclass
class IngestRequest:
    
    backfill_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'backfill_id', 'style': 'form', 'explode': True }})
    r"""If this ingestion request is part of a backfill, this parameter ties the ingested events to the backfill"""
    debug: Optional[IngestDebug] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'debug', 'style': 'form', 'explode': True }})
    r"""Flag to enable additional debug information in the endpoint response"""
    request_body: Optional[IngestRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ingest400ApplicationJSONDebug:
    r"""Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys."""
    
    duplicate: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duplicate'), 'exclude': lambda f: f is None }})
    ingested: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingested'), 'exclude': lambda f: f is None }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ingest400ApplicationJSONValidationFailed:
    
    idempotency_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idempotency_key'), 'exclude': lambda f: f is None }})
    validation_errors: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validation_errors'), 'exclude': lambda f: f is None }})
    r"""An array of objects corresponding to validation failures for each idempotency_key."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ingest400ApplicationJSON:
    r"""Bad Request"""
    
    validation_failed: list[Ingest400ApplicationJSONValidationFailed] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validation_failed') }})
    r"""Contains all failing validation events. In the case of a 400, there will be at least one entry in this array."""
    debug: Optional[Ingest400ApplicationJSONDebug] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debug'), 'exclude': lambda f: f is None }})
    r"""Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ingest200ApplicationJSONDebug:
    r"""Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys."""
    
    duplicate: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duplicate'), 'exclude': lambda f: f is None }})
    ingested: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ingested'), 'exclude': lambda f: f is None }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ingest200ApplicationJSONValidationFailed:
    
    idempotency_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idempotency_key'), 'exclude': lambda f: f is None }})
    r"""The passed idempotency_key corresponding to the validation_errors"""
    validation_errors: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validation_errors'), 'exclude': lambda f: f is None }})
    r"""An array of objects corresponding to validation failures for each idempotency_key."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ingest200ApplicationJSON:
    r"""OK"""
    
    validation_failed: list[Ingest200ApplicationJSONValidationFailed] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validation_failed') }})
    r"""Contains all failing validation events. In the case of a 200, this array will always be empty. This field will always be present."""
    debug: Optional[Ingest200ApplicationJSONDebug] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debug'), 'exclude': lambda f: f is None }})
    r"""Optional debug information (only present when debug=true is passed to the endpoint). Contains ingested and duplicate event idempotency keys."""
    

@dataclasses.dataclass
class IngestResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    ingest_200_application_json_object: Optional[Ingest200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""
    ingest_400_application_json_object: Optional[Ingest400ApplicationJSON] = dataclasses.field(default=None)
    r"""Bad Request"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    